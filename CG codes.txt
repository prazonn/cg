1)DDA ALGORITHM

#include<stdio.h>
#include<conio.h>
#include<graphics.h>
void main()
{
int gd=DETECT,gm, i ;
float dx,dy,steps,x,y;
int x0,x1,y0,y1;
initgraph(&gd,&gm,"C:/TURBOC3/BGI");
setbkcolor(WHITE);
x0=100,y0=200,x1=500,y1=300;
dx=(float)(x1-x0);
dy=(float)(y1-y0);
 if(dx>=dy)
{
steps=dx;
}
else
{
steps=dy;
}
dx=dx/steps;
dy=dy/steps;
x=x0;
y=y0;
i=1;
while(i<=steps)
{
putpixel(x,y,RED);
x=x+dx;
y=y+dy;
i=i+1;
}
 
getch();
closegraph();

}







2)BRESENHAM LINE ALGORITHM
#include<stdio.h>
#include<graphic.h>
#include<dos.h>
#include<math.h>
void drawline(int x0,int y0,int x1,int y1)
{
int dx,dy,p,x,y;
dx=abs(x1-x0);
dy=abs(y1-y0);
p=2*dy-dx;
x=x0;
y=y0;

 while(x<x1)
{
if(p>=0)
{
putpixel(x,y,15);
delay(10);
y++
p=p+2*(dy-dx);
}
else
{
putpixel(x,y,15);
delay(10);
p=p+2*dy;
}
x++;
}
}
int main()
{
int gd=DETECT,gm,x0,y0,x1,y1;
initgraph(&gd,&gm,"C:/TURBOC3/BGI");
printf("Enter the coordinates of first point :");
scanf("%d %d",&x0,&y0);
printf("Enter the coordinates of second  point :");
scanf("%d %d",&x1,&y1);
drawline(x0,y0,x1,y1);
return 0;
}



3)MIDPOINT ALGORITHM
#include<stdio.h>
#include<graphic.h>
#include<dos.h>
void drawcircle(int x0,int y0,int radius)
{
int y=radius;
int x=0;
p=1-radius;
 while(x<=y)
{
putpixel(x0+x,y0+y,15);
delay(10);
putpixel(x0+y,y0+x,15);
delay(10);
putpixel(x0-x,y0+y,15);
delay(10);
putpixel(x0-y,y0+x,15);
delay(10);
putpixel(x0-x,y0-y,15);
delay(10);
putpixel(x0-y,y0-x,15);
delay(10);
putpixel(x0+x,y0-y,15);
delay(10);
putpixel(x0+y,y0-x,15);
delay(10);

if(p<0)
{
x++;
p=p+2*x+1;
}
else
{
x++;
y--;
p=p+2*(x-y)+1;
}
}
}
int main()
{
int gd=DETECT,gm,x,y,r;
initgraph(&gd,&gm,"C:/TURBOC3/BGI");
printf("Enter the radius of circle");
scanf("%d",&r);
printf("Enter the coordinates of circle ");
scanf("%d %d ",&x,&y);
drawcircle(x,y,r);
return 0;
}



4)ELLIPSE MIDPOINT ALGORITHM
#include<stdio.h>
#include<graphics.h>
void main()
{
 int gd=DETECT,gm;
 float p,x,y,xc,yc,a,b;
 initgraph(&gd,&gm,"C:\\tc\\bgi");
 cleardevice();
 printf("Enter xc, yc:\n");
 scanf("%f%f",&xc,&yc);
 printf("Enter a, b:\n");
 scanf("%f%f",&a,&b);
 x=0;
 y=b;
 //Region 1
 p=(b*b)-(a*a*b)+(0.25*a*a);
 do
 {
  putpixel(xc+x,yc+y,WHITE);
  putpixel(xc+x,yc-y,WHITE);
  putpixel(xc-x,yc+y,WHITE);
  putpixel(xc-x,yc-y,WHITE);
  if(p<0)
  {
   x=x+1;
   p=p+2*b*b*x+b*b;
  }
  else
  {
   x=x+1;
   y=y-1;
   p=p+2*b*b*x-2*a*a*y+b*b;
  }
 }while(2*b*b*x<2*a*a*y);
 //Region 2
 p=(b*b*(x+0.5)(x+0.5))+((y-1)(y-1)*a*a-a*a*b*b);
 do
 {
  putpixel(xc+x,yc+y,WHITE);
  putpixel(xc+x,yc-y,WHITE);
  putpixel(xc-x,yc+y,WHITE);
  putpixel(xc-x,yc-y,WHITE);
  if(p>0)
  {
   y=y-1;
   p=p-2*a*a*y+a*a;
  }
  else
  {
   x=x+1;
   y=y-1;
   p=p-2*a*a*y+2*b*b*x+a*a;
  }
 }while(y!=0);
 getch();
 closegraph();
 restorecrtmode();
}
















































5) 	FLOOD-FILL ALGORITHM

#include<stdio.h>
#include<graphic.h>
#include<conio.h>

void floodfill(int x,int y,int ncolor,int ocolor)
{
if(getpixel(x,y)==ocolor)
{
putpixel(x,y,ocolor);
floodfill(x+1,y,ncolor,ocolor);
floodfill(x+1,y-1,ncolor,ocolor);
floodfill(x+1,y+1,ncolor,ocolor);
floodfill(x,y-1,ncolor,ocolor);
floodfill(x,y+1,ncolor,ocolor);
floodfill(x-1,y,ncolor,ocolor);
floodfill(x-1,y-1,ncolor,ocolor);
floodfill(x-1,y+1,ncolor,ocolor);
}
}

void main()
{
int x,y,ncolor,ocolor;
int gd=DETECT,gm=DETECT;
clrscr();
printf("Enter the seed point(x,y) : ");
scanf("%d %d",&x,&y);
printf("Enter the new color");
scanf("%d",&ncolor);
printf("Enter the old color");
scanf("%d",&ocolor);
 initgraph(&gd,&gm,"C:\\TURBOC3\\BGI");
cleardevice();
rectangle(50,50,100,100);
floodfill(x,y,ncolor,ocolor);
getch();
}

BOUNDARY-FILL ALGORITHM

#include<stdio.h>
#include<graphic.h>
#include<conio.h>

void boundaryfill(int x,int y,int fcolor,int bcolor)
{
if(getpixel(x,y)!=bcolor && getpixel(x,y)!=fcolor)
{
putpixel(x,y,fcolor);
boundaryfill(x+1,y,fcolor,bcolor);
boundaryfill(x,y+1,fcolor,bcolor);
boundaryfill(x-1,y,fcolor,bcolor);
boundaryfill(x,y-1,fcolor,bcolor);
}
}
int main()
{
int x,y;
int gd=DETECT,gm,radius;
initgraph(&gd,&gm,"C:/TURBOC3/BGI");
printf("Enter the x and y positions for circle ");
scanf("%d %d",&x,&y);
printf("Enter the radius of circle");
scanf("%d",&radius);
circle(x,y,radius);
boundaryfill(x,y,4,15);
delay(8000);
closegraph();
return 0;
}

6) 2D TRANSFORMATION

#include<stdio.h>
#include<graphic.h>
#include<conio.h>
#include<stdlib.h>
#include<math.h>
#include<iostream.h>

void main()
{
int gm;
int gd=DETECT;
int x1,x2,x3,y1,y2,y3,nx1,nx2,nx3,ny1,ny2,ny3,c;
int sx,sy,xt,yt,r;
float t;
initgraph(&gd,&gm,"C:/TURBOC3/BGI");
printf("Program for basic transactions");
printf("Enter the points of triangle");
scanf("%d %d %d %d %d %d",&x1,&x2,&x3,&y1,&y2,&y3);
setcolor(3);
line(x1,y1,x2,y2);
line(x2,y2,x3,y3);
line(x3,y3,x1,y1);
getch();
printf("\n 1.Translation \n2. Rotation \n3.Scaling\n.4.exit");
printf("Enter your choice");
scanf("%d",&c);
switch(c)
{
case 1:
printf("Enter the translation factor");
scanf("%d %d",&xt,&yt);
nx1=x1+xt;
ny1=y1+yt;
nx2=x2+xt;
ny2=y2+yt;
nx3=x3+xt;
ny3=y3+yt;
line(nx1,ny1,nx2,ny2);
line(nx2,ny2,nx3,ny3);
line(nx3,ny3,nx1,ny1);
getch();

case 2:
printf("Enter the angle of rotation");
scanf("%d",&r);
t=3.14*r/180;
nx1=abs(x1*cos(t)-y1*sin(t));
ny1=abs(x1*sin(t)+y1*cos(t));
nx2=abs(x2*cos(t)-y2*sin(t));
ny2=abs(x2*sin(t)+y2*cos(t));
nx3=abs(x3*cos(t)-y3*sin(t));
ny3=abs(x3*sin(t)+y3*cos(t));
line(nx1,ny1,nx2,ny2);
line(nx2,ny2,nx3,ny3);
line(nx3,ny3,nx1,ny1);
getch();

case 3:
printf("Enter the scaling factor");
scanf("%d %d",&sx,&sy);
nx1=x1*sx;
ny1=y1*sy;
nx2=x2*sx;
ny2=y2*sy;
nx3=x3*sx;
ny3=y3*sy;
line(nx1,ny1,nx2,ny2);
line(nx2,ny2,nx3,ny3);
line(nx3,ny3,nx1,ny1);
getch();

case 4:
break;
 default:
printf("Enter the correct choice!");
}
closegraph();
getch();
}


7) BEZIER CURVE

#include<stdio.h>
#include<graphic.h>
#include<conio.h>
#include<stdlib.h>
#include<math.h>

void bezier( int x[4],int y[4])
{
int gd=DETECT,gm;
int i;
double t;
initgraph(&gd,&gm,"C:/TURBOC3/BGI");
for(t=0.0;t<1.0;t=t+0.0005)
{
double xt=pow(1-t,3)*x[0]+3*t*pow(1-t,2)*x[1]+3*pow(t,2)*(1-t)*x[2]+pow(t,3)*x;
double yt=pow(1-t,3)*y[0]+3*t*pow(1-t,2)*y[1]+3*pow(t,2)*(1-t)*y[2]+pow(t,3)*y;
putpixel(xt,yt,WHITE);
}

for(i=0;i<4;i++)
{
putpixel(x[i],y[i],YELLOW);
}
getch();
closegraph();
return;
}
void main()
{
 int x[4],y[4];
int i;
for(i=0;i<4;i++)
{
printf("enter the coordinates of 4 control points : ");
scanf("%d %d ",&x[i],&y[i]);
}
bezier(x,y);
}


8)FRACTAL GENERATION

#include<stdio.h>
#include<graphic.h>
#include<stdlib.h>
#define SIN 0.866

void koch(int x1,int y1,int x2,int y2,m)
{
int xx,yy,x[5],y[5],lx,ly,offx=50,offy=300;
lx=(x2-x1)/3;
ly=(y2-y1)/3;
x[0]=x1;
y[0]=y1;
x[4]=x2;
y[4]=y2;
x[1]=x[0]+lx;
y[1]=y[0]+ly;
x[3]=x[0]+2*lx;
y[3]=y[0]+2*ly;
xx=x[3]-x[1];
yy=y[3]-y[1];
x[2]=xx*(0.5)+yy*(SIN);
y[2]=-xx*(SIN)+yy*(0.5);
x[2]=x[2]+x[1];
y[2]=y[2]+y[1];

if(m>0)
{
koch(x[0],y[0],x[1],y[1],m-1);
koch(x[1],y[1],x[2],y[2],m-1);
koch(x[2],y[2],x[3],y[3],m-1);
koch(x[3],y[3],x[4],y[4],m-1);
}
else
{
line(offx+x[0],offy+y[0],offx+x[1],offy+y[1]);
line(offx+x[1],offy+y[1],offx+x[2],offy+y[2]);
line(offx+x[2],offy+y[2],offx+x[3],offy+y[3]);
line(offx+x[3],offy+y[3],offx+x[4],offy+y[4]);
}
void main()
{
int n,gd=DETECT,gm;
int x1=0,x2=550,y1=0,y2=0;
printf("Enter the level of curve generation");
scanf("%d",&n);
initgraph(&gd,&gm,"C:/TURBOC3/BGI");
koch(x1,y1,x2,y2,n);
getch();
closegraph();
}


